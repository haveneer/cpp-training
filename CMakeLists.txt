cmake_minimum_required(VERSION 3.12)
project(cpp-training)

set(CMAKE_CXX_STANDARD 17)
add_definitions(-DDEBUG_TYPE)

add_executable(manage_test_crash tools/manage_test_crash.c)

message(STATUS "Use *.cpp file globbing")
file(GLOB SRCS1 "*.cpp")
file(GLOB SRCS2 "Solutions/*.cpp")
file(GLOB SRCS3 "Curiosity/*.cpp")
file(GLOB SRCS4 "extras/*.cpp")
set(SRCS ${SRCS1} ${SRCS2} ${SRCS3} ${SRCS4})

if (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g -Wall -Wextra")
elseif (CMAKE_CXX_COMPILER_ID STREQUAL "Clang" OR CMAKE_CXX_COMPILER_ID STREQUAL "AppleClang")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g -Wall -Wextra")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wsign-compare -Wunused -Wunused-member-function -Wunused-private-field")
elseif (CMAKE_CXX_COMPILER_ID MATCHES "MSVC")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W4")
endif ()

set(EXCLUDED)
if (MSVC)
    # Lambda_y-combinator.cpp operator_funky_overload.cpp : pb with CTAD
    # controlflow_if_advanced.cpp : pb with if selector with initializer
    # Struct.cpp RAII.cpp DefaultCtor.cpp move_vs_copy.cpp : slow down with Github ??
    list(APPEND EXCLUDED Lambda_y-combinator.cpp operator_funky_overload.cpp controlflow_if_advanced.cpp)
    list(APPEND EXCLUDED move_vs_copy.cpp)
    if (NOT DONT_VS_EXCLUDE)
        list(APPEND EXCLUDED DefaultCtor.cpp RAII.cpp Struct.cpp)
    endif ()
endif ()

enable_testing()
foreach (SRC_PATH ${SRCS})
    STRING(REGEX REPLACE "^${CMAKE_SOURCE_DIR}/" "" SRC ${SRC_PATH})
    get_filename_component(SHORT_SRC ${SRC} NAME)
    string(REGEX REPLACE ".cpp$" ".exe" EXE ${SHORT_SRC})
    list(FIND EXCLUDED ${SRC} IS_EXCLUDED)
    if (IS_EXCLUDED GREATER_EQUAL 0)
        message(STATUS "\tExclude example ${SRC}")
    else ()
        string(REGEX REPLACE ".cpp$" "" TEST ${SRC})
        file(GLOB HEADERS1_PATH "${TEST}.h*")
        file(GLOB HEADERS2_PATH "${TEST}-*.h*")
        set(HEADERS)
        if (HEADERS1_PATH OR HEADERS2_PATH)
            foreach (HEADER_PATH ${HEADERS1_PATH} ${HEADERS2_PATH})
                get_filename_component(HEADER ${HEADER_PATH} NAME)
                list(APPEND HEADERS ${HEADER})
            endforeach ()
            message(STATUS "\tAdd example ${SRC} with ${HEADERS}")
        else ()
            message(STATUS "\tAdd example ${SRC}")
        endif ()

        add_executable(${EXE} ${SRC} ${HEADERS})

        set(WILL_FAIL_FOUND 0)
        string(FIND ${SRC} "-will_fail" WILL_FAIL_FOUND)
        if (${WILL_FAIL_FOUND} EQUAL "-1")
            add_test(NAME ${TEST} COMMAND ${EXE})
        else ()
            add_test(NAME ${TEST} COMMAND manage_test_crash ${EXE})
            set_tests_properties(${TEST} PROPERTIES WILL_FAIL TRUE)
        endif ()
    endif ()
endforeach ()
